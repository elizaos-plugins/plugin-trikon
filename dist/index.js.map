{"version":3,"sources":["../src/actions/trikon.ts","../src/providers/wallet.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\n\nclass TransferValidationError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'TransferValidationError';\n    }\n}\n\nclass InsufficientBalanceError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'InsufficientBalanceError';\n    }\n}\n\nexport interface TransferContent extends Content {\n    recipient: string;\n    amount: string | number;\n}\n\nfunction isTransferContent(content: any): content is TransferContent {\n    return (\n        typeof content.recipient === \"string\" &&\n        /^0x[a-fA-F0-9]{64}$/.test(content.recipient) &&\n        (typeof content.amount === \"string\" ||\n            typeof content.amount === \"number\") &&\n        Number(content.amount) > 0\n    );\n}\n\nconst transferTemplate = `Respond with a JSON markdown block containing only the extracted values. Use null for any values that cannot be determined.\n\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"0x2badda48c062e861ef17a96a806c451fd296a49f45b272dee17f85b0e32663fd\",\n    \"amount\": \"1000\"\n}\n\\`\\`\\`\n\n{{recentMessages}}\n\nGiven the recent messages, extract the following information about the requested token transfer:\n- Recipient wallet address\n- Amount to transfer\n\nRespond with a JSON markdown block containing only the extracted values.`;\n\nexport default {\n    name: \"SEND_TOKEN\",\n    similes: [\n        \"TRANSFER_TOKEN\",\n        \"TRANSFER_TOKENS\",\n        \"SEND_TOKENS\",\n        \"SEND_TRK\",\n        \"PAY\",\n    ],\n    validate: async (runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.log(\"Validating trikon transfer from user:\", message.userId);\n        try {\n            // Add actual validation logic here\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Validation error:\", error);\n            return false;\n        }\n    },\n    description: \"Transfer tokens from the agent's wallet to another address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.log(\"Starting SEND_TOKEN handler...\");\n\n        try {\n            if (!state) {\n                state = (await runtime.composeState(message)) as State;\n            } else {\n                state = await runtime.updateRecentMessageState(state);\n            }\n\n            const transferContext = composeContext({\n                state,\n                template: transferTemplate,\n            });\n\n            const content = await generateObjectDeprecated({\n                runtime,\n                context: transferContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            if (!isTransferContent(content)) {\n                throw new TransferValidationError(\"Invalid transfer content provided\");\n            }\n\n            // TODO: Implement actual transfer logic here\n            elizaLogger.log(\n                `Would transfer ${content.amount} tokens to ${content.recipient}`\n            );\n\n            if (callback) {\n                callback({\n                    text: `Transfer simulation successful for ${content.amount} TRK to ${content.recipient}`,\n                    content: {\n                        success: true,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            if (error instanceof TransferValidationError) {\n                elizaLogger.error(\"Transfer validation error:\", error);\n                if (callback) {\n                    callback({\n                        text: `Invalid transfer request: ${error.message}`,\n                        content: { error: error.message },\n                    });\n                }\n            } else if (error instanceof InsufficientBalanceError) {\n                elizaLogger.error(\"Insufficient balance:\", error);\n                if (callback) {\n                    callback({\n                        text: `Insufficient balance: ${error.message}`,\n                        content: { error: error.message },\n                    });\n                }\n            } else {\n                elizaLogger.error(\"Unexpected error during token transfer:\", error);\n                if (callback) {\n                    callback({\n                        text: `Error transferring tokens: ${error.message}`,\n                        content: { error: error.message },\n                    });\n                }\n            }\n            return false;\n        }\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 100 TRK tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll send 100 TRK tokens now...\",\n                    action: \"SEND_TOKEN\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Successfully sent 100 TRK tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\n                },\n            },\n        ],\n        // Added example for failed transfer\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Send 1000000 TRK tokens to 0x4f2e63be8e7fe287836e29cde6f3d5cbc96eefd0c0e3f3747668faa2ae7324b0\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Unable to send tokens - insufficient balance\",\n                    action: \"SEND_TOKEN\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import { elizaLogger, type Provider } from \"@elizaos/core\";\n\nfunction validateAddress(address: string | undefined): string {\n    if (!address) {\n        throw new Error('TRIKON_WALLET_ADDRESS environment variable is required');\n    }\n    if (!/^0x[a-fA-F0-9]{64}$/.test(address)) {\n        throw new Error('Invalid wallet address format');\n    }\n    return address;\n}\n\nfunction validateBalance(balance: string | undefined): string {\n    if (!balance) return \"0\";\n    if (!/^\\d+$/.test(balance)) {\n        throw new Error('Invalid balance format');\n    }\n    return balance;\n}\n\nexport interface WalletProvider {\n    address: string;\n    balance: string;\n    getBalance(): Promise<string>;\n    getAddress(): Promise<string>;\n}\n\nexport const walletProvider: Provider = {\n    get: async () => {\n        elizaLogger.log(\"Getting Trikon wallet provider...\");\n        return {\n            address: validateAddress(process.env.TRIKON_WALLET_ADDRESS),\n            balance: validateBalance(process.env.TRIKON_INITIAL_BALANCE),\n            getBalance: async () => validateBalance(process.env.TRIKON_INITIAL_BALANCE),\n            getAddress: async () => validateAddress(process.env.TRIKON_WALLET_ADDRESS)\n        };\n    }\n};\n\nexport default walletProvider;","import type { Plugin } from \"@elizaos/core\";\nimport transferAction from \"./actions/trikon\";\nimport { walletProvider } from \"./providers/wallet\";\n\nexport const trikonPlugin: Plugin = {\n    name: \"trikon\",\n    description: \"Trikon Plugin for Eliza - POC for token transfer functionality\",\n    actions: [transferAction],\n    evaluators: [], // No evaluators needed for POC\n    providers: [walletProvider],\n    services: [], // No services needed for POC\n    clients: [], // No clients needed for POC\n};\n\n// Export types and utilities\nexport * from \"./providers/wallet\";\nexport { transferAction as TransferTrikonToken };\nexport default trikonPlugin;"],"mappings":"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","names":["elizaLogger"]}